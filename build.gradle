plugins {
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id

archivesBaseName = "${mod_id}-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

minecraft {
    mappings channel: mappings_channel, version: "${mappings_version}-${mc_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            
        }

        server {

        }

        data {
            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "Curios"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = "Expandability"
        url = "https://maven.florens.be/releases"
    }
    maven {
        name = "Cursemaven"
        url = "https://www.cursemaven.com/"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name = "The One Probe"
        url = "https://maven.k-4u.nl"
    }

    //maven { url "https://maven.tehnut.info" } // HWYLA

    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven {
        name = "JEI"
        url = "https://maven.blamejared.com/"
    }
    maven {
        url = "https://jitpack.io"
        content {
            includeGroupByRegex "com.github.*"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}+${mc_version}")
    implementation fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") { transitive = false }
    implementation fg.deobf("curse.maven:cosmetic-armor-reworked-${cosmetic_armor_project}:${cosmetic_armor_file}")
    implementation fg.deobf("curse.maven:jade-${jade_project}:${jade_file}")
    //implementation fg.deobf("be.florens:expandability-forge:${expandability_version}")

    // Testing Dependencies
    //runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
    //runtimeOnly fg.deobf("curse.maven:sophisticated_backpacks-${sophisticated_backpacks_project}:${sophisticated_backpacks_file}") { transitive = false }
    //runtimeOnly fg.deobf("curse.maven:sophisticated_core-${sophisticated_core_project}:${sophisticated_core_file}") { transitive = false }

    // runtimeOnly fg.deobf("curse.maven:scalalib-${scala_lib_project}:${scala_lib_file}") { transitive = false }
    // runtimeOnly fg.deobf("curse.maven:bdlib-${bdlib_project}:${bdlib_file}") { transitive = false }
    // runtimeOnly fg.deobf("curse.maven:technobauble-${technobauble_project}:${technobauble_file}") { transitive = false }

    //runtimeOnly fg.deobf("curse.maven:cofh-core-${cofh_core_project}:${cofh_core_file}")
    //runtimeOnly fg.deobf("curse.maven:ensorcellation-${ensorcellation_project}:${ensorcellation_file}")
    //runtimeOnly fg.deobf("curse.maven:artifacts-${artifacts_project}:${artifacts_file}")
    //runtimeOnly fg.deobf("curse.maven:relics-${relics_project}:${relics_file}")
    //runtimeOnly fg.deobf("curse.maven:travelers-backpack-${travelers_backpack_project}:${travelers_backpack_file}")
    //runtimeOnly fg.deobf("curse.maven:lost_trinkets-${lost_trinkets_project}:${lost_trinkets_file}")
    //runtimeOnly fg.deobf("curse.maven:lollipop-${lollipop_project}:${lollipop_file}")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mc_version          : mc_version, mc_version_range: mc_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {

}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
